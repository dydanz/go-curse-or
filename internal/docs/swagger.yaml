basePath: /api
definitions:
  domain.CreateMerchantRequest:
    properties:
      merchant_name:
        type: string
      merchant_type:
        allOf:
        - $ref: '#/definitions/domain.MerchantType'
        enum:
        - bank
        - e-commerce
        - repair_shop
    required:
    - merchant_name
    - merchant_type
    type: object
  domain.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
    required:
    - email
    - name
    - password
    - phone
    type: object
  domain.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  domain.LoginResponse:
    properties:
      expires_at:
        type: string
      token:
        description: Token with Bearer prefix
        example: Bearer eyJhbGciOiJ...
        type: string
      user_id:
        type: string
    type: object
  domain.Merchant:
    properties:
      created_at:
        type: string
      merchant_id:
        type: string
      merchant_name:
        type: string
      merchant_type:
        $ref: '#/definitions/domain.MerchantType'
      updated_at:
        type: string
    type: object
  domain.MerchantType:
    enum:
    - bank
    - e-commerce
    - repair_shop
    type: string
    x-enum-varnames:
    - MerchantTypeBank
    - MerchantTypeEcommerce
    - MerchantTypeRepairShop
  domain.PointsBalance:
    properties:
      id:
        type: string
      last_updated:
        type: string
      total_points:
        type: integer
      user_id:
        type: string
    type: object
  domain.Redemption:
    properties:
      created_at:
        type: string
      id:
        type: string
      redeemed_at:
        type: string
      reward_id:
        type: string
      status:
        description: '"completed", "pending", "failed", "canceled"'
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  domain.RegistrationRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
    required:
    - email
    - name
    - password
    - phone
    type: object
  domain.Reward:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      points_required:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  domain.Transaction:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      points:
        type: integer
      status:
        description: '"completed", "pending", "canceled"'
        type: string
      transaction_date:
        type: string
      transaction_type:
        description: '"earn" or "redeem"'
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  domain.UpdateMerchantRequest:
    properties:
      merchant_name:
        type: string
      merchant_type:
        allOf:
        - $ref: '#/definitions/domain.MerchantType'
        enum:
        - bank
        - e-commerce
        - repair_shop
    required:
    - merchant_name
    - merchant_type
    type: object
  domain.UpdateUserRequest:
    properties:
      name:
        type: string
      phone:
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      status:
        $ref: '#/definitions/domain.UserStatus'
      updated_at:
        type: string
    type: object
  domain.UserStatus:
    enum:
    - pending
    - active
    - locked
    - banned
    type: string
    x-enum-comments:
      UserStatusActive: Email verified, can login
      UserStatusBanned: Account banned by admin
      UserStatusLocked: Account locked due to violations
      UserStatusPending: Initial state after registration
    x-enum-varnames:
    - UserStatusPending
    - UserStatusActive
    - UserStatusLocked
    - UserStatusBanned
  domain.VerificationRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  handler.CreateProgramRequest:
    properties:
      merchant_id:
        type: string
      point_currency_name:
        type: string
      program_name:
        type: string
    required:
    - merchant_id
    - point_currency_name
    - program_name
    type: object
  handler.UpdateProgramRequest:
    properties:
      point_currency_name:
        type: string
      program_name:
        type: string
    required:
    - point_currency_name
    - program_name
    type: object
  postgres.Program:
    properties:
      createdAt:
        type: string
      merchantID:
        type: string
      pointCurrencyName:
        type: string
      programID:
        type: string
      programName:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Go-Playground - Random Go/Gin-Boilerplate Playground
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go-Playground
  version: "1.0"
paths:
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate their token
      parameters:
      - description: User ID for authentication
        in: header
        name: User-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: logged out successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - User-ID: []
      summary: User logout
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and send verification OTP
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.RegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register new user
      tags:
      - auth
  /auth/test/get-verification/code:
    get:
      consumes:
      - application/json
      description: Get OTP verification code by email (for testing purposes only)
      parameters:
      - description: Email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get verification code for testing
      tags:
      - test
  /auth/test/random-user:
    get:
      consumes:
      - application/json
      description: Get a random verified user's credentials (for testing purposes
        only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get random verified user
      tags:
      - test
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Verify user registration using OTP
      parameters:
      - description: Verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.VerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify user registration
      tags:
      - auth
  /merchants:
    get:
      description: Get all merchants
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Merchant'
            type: array
      summary: Get all merchants
      tags:
      - merchants
    post:
      consumes:
      - application/json
      description: Create a new merchant
      parameters:
      - description: Merchant details
        in: body
        name: merchant
        required: true
        schema:
          $ref: '#/definitions/domain.CreateMerchantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Merchant'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create merchant
      tags:
      - merchants
  /merchants/{id}:
    delete:
      description: Delete a merchant
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete merchant
      tags:
      - merchants
    get:
      description: Get merchant details by ID
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Merchant'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get merchant by ID
      tags:
      - merchants
    put:
      consumes:
      - application/json
      description: Update merchant details
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: string
      - description: Merchant details
        in: body
        name: merchant
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateMerchantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Merchant'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update merchant
      tags:
      - merchants
  /ping:
    get:
      description: Check the health of database and Redis connections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - system
  /points/{user_id}:
    get:
      consumes:
      - application/json
      description: Get points balance for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PointsBalance'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get user points balance
      tags:
      - points
    put:
      consumes:
      - application/json
      description: Update points balance for a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Points to add/subtract
        in: body
        name: points
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PointsBalance'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Update points balance
      tags:
      - points
  /programs:
    post:
      consumes:
      - application/json
      description: Create a new loyalty program for a merchant
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Program details
        in: body
        name: program
        required: true
        schema:
          $ref: '#/definitions/handler.CreateProgramRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/postgres.Program'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new loyalty program
      tags:
      - programs
  /programs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific loyalty program
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a loyalty program
      tags:
      - programs
    get:
      consumes:
      - application/json
      description: Get details of a specific loyalty program
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postgres.Program'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a loyalty program by ID
      tags:
      - programs
    put:
      consumes:
      - application/json
      description: Update details of a specific loyalty program
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      - description: Program details
        in: body
        name: program
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateProgramRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postgres.Program'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a loyalty program
      tags:
      - programs
  /programs/merchant/{merchant_id}:
    get:
      consumes:
      - application/json
      description: Get all loyalty programs for a specific merchant
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Merchant ID
        in: path
        name: merchant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/postgres.Program'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all programs for a merchant
      tags:
      - programs
  /redemptions:
    post:
      consumes:
      - application/json
      description: Create a new redemption request
      parameters:
      - description: Redemption details
        in: body
        name: redemption
        required: true
        schema:
          $ref: '#/definitions/domain.Redemption'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Redemption'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Create redemption
      tags:
      - redemptions
  /redemptions/{id}:
    get:
      consumes:
      - application/json
      description: Get redemption details by ID
      parameters:
      - description: Redemption ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Redemption'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get redemption by ID
      tags:
      - redemptions
  /redemptions/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a redemption
      parameters:
      - description: Redemption ID
        in: path
        name: id
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          enum:
          - completed
          - pending
          - failed
          - canceled
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Update redemption status
      tags:
      - redemptions
  /redemptions/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all redemptions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Redemption'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get user redemptions
      tags:
      - redemptions
  /rewards:
    get:
      consumes:
      - application/json
      description: Get all available rewards
      parameters:
      - description: Filter active rewards only
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reward'
            type: array
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get all rewards
      tags:
      - rewards
    post:
      consumes:
      - application/json
      description: Create a new reward
      parameters:
      - description: Reward details
        in: body
        name: reward
        required: true
        schema:
          $ref: '#/definitions/domain.Reward'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Reward'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Create reward
      tags:
      - rewards
  /rewards/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a reward
      parameters:
      - description: Reward ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Delete reward
      tags:
      - rewards
    get:
      consumes:
      - application/json
      description: Get reward details by ID
      parameters:
      - description: Reward ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reward'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get reward by ID
      tags:
      - rewards
    put:
      consumes:
      - application/json
      description: Update reward details
      parameters:
      - description: Reward ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated reward details
        in: body
        name: reward
        required: true
        schema:
          $ref: '#/definitions/domain.Reward'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reward'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Update reward
      tags:
      - rewards
  /transactions:
    post:
      consumes:
      - application/json
      description: Create a new transaction
      parameters:
      - description: Transaction details
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/domain.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Transaction'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Create transaction
      tags:
      - transactions
  /transactions/{id}:
    get:
      consumes:
      - application/json
      description: Get transaction details by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Transaction'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get transaction by ID
      tags:
      - transactions
  /transactions/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all transactions for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Transaction'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get user transactions
      tags:
      - transactions
  /users:
    get:
      description: Retrieve all users from the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by their UUID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by their ID
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information by their UUID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get current user's data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      - UserIdAuth: []
      summary: Get current user
      tags:
      - users
security:
- BearerAuth: []
- UserIdAuth: []
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
  UserIdAuth:
    description: User ID for authentication
    in: header
    name: X-User-Id
    type: apiKey
swagger: "2.0"
